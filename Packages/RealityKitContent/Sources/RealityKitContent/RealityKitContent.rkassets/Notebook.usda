#usda 1.0
(
    defaultPrim = "Notebook"
    metersPerUnit = 1
    upAxis = "Y"
)

def "Notebook" (
    active = true
    customData = {
        float3 rotationEulerHint = (1.5707964, 0, 0)
    }
    references = @Notebook Edit.usdz@
)
{
    quatf xformOp:orient = (0.70710677, 0.70710677, 0, 0)
    float3 xformOp:scale = (0.03, 0.03, 0.03)
    float3 xformOp:translate = (0, 0.23, 5.122274e-9)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

    over "Materials"
    {
        over "BookCover"
        {
            color3f inputs:Color = (0.4549959, 0.78587574, 0.7898911) (
                colorSpace = "srgb_texture"
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-770.9336, 341.7539)
                        float2 sizeInSubgraph = (133, 53)
                        int stackingOrderInSubgraph = 81
                    }
                }
            )
            token outputs:mtlx:surface.connect = </Notebook/Materials/BookCover/PreviewSurface.outputs:out>
            token outputs:realitykit:vertex
            token outputs:surface.connect = </Notebook/Materials/BookCover/BookCoverPreviewSurface.outputs:surface>
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (0, 109.5)
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 72

            over "BookCoverPreviewSurface" (
                active = false
            )
            {
            }

            def Shader "Roughness"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @Light Leather/TH_Leather_White_roughness.png@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-762.23047, -33.003906)
                float2 ui:nodegraph:node:size = (148.5, 199)
                int ui:nodegraph:node:stackingOrder = 74
            }

            def Shader "PreviewSurface"
            {
                uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
                float inputs:clearcoat
                float inputs:clearcoatRoughness
                color3f inputs:diffuseColor.connect = None
                color3f inputs:emissiveColor.connect = </Notebook/Materials/BookCover.inputs:Color>
                float inputs:ior
                float inputs:metallic.connect = None
                float3 inputs:normal.connect = </Notebook/Materials/BookCover/Normal.outputs:out>
                float inputs:occlusion
                float inputs:opacity
                float inputs:roughness.connect = </Notebook/Materials/BookCover/Roughness.outputs:out>
                token outputs:out
                float2 ui:nodegraph:node:pos = (-255, 105)
                float2 ui:nodegraph:node:size = (159.5, 307)
                int ui:nodegraph:node:stackingOrder = 72
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["Advanced"]
            }

            def Shader "Normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @Light Leather/TH_Leather_White_normal.png@
                string inputs:filtertype
                string inputs:vaddressmode
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-762.60547, 177.73828)
                float2 ui:nodegraph:node:size = (148.5, 199)
                int ui:nodegraph:node:stackingOrder = 76
            }
        }

        over "BookSide"
        {
            token outputs:mtlx:surface
            token outputs:realitykit:vertex
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (0, 109.5)
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)
        }

        over "BookCoverTitle"
        {
            color4f inputs:Color = (0.29484296, 0.29484296, 0.29484296, 0) (
                colorSpace = "srgb_texture"
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-809.3867, 121.55469)
                        float2 sizeInSubgraph = (133, 53)
                    }
                }
            )
            prepend token outputs:mtlx:surface.connect = </Notebook/Materials/BookCoverTitle/PreviewSurface.outputs:out>
            token outputs:realitykit:vertex
            token outputs:surface.connect = </Notebook/Materials/BookCoverTitle/BookCoverTitlePreviewSurface.outputs:surface>
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (0, 109.5)
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)

            over "BookCoverTitlePreviewSurface" (
                active = false
            )
            {
                color3f inputs:diffuseColor = (0.12984204, 0.12984613, 0.12984395) (
                    colorSpace = "srgb_texture"
                )
            }

            def Shader "PreviewSurface"
            {
                uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
                color3f inputs:diffuseColor.connect = </Notebook/Materials/BookCoverTitle/Convert.outputs:out>
                float inputs:metallic
                float inputs:roughness
                token outputs:out
                float2 ui:nodegraph:node:pos = (-255, 105)
                float2 ui:nodegraph:node:size = (148.5, 199)
            }

            def Shader "Over"
            {
                uniform token info:id = "ND_over_color4"
                color4f inputs:bg.connect = </Notebook/Materials/BookCoverTitle.inputs:Color>
                color4f inputs:fg.connect = </Notebook/Materials/BookCoverTitle/Logo.outputs:out>
                float inputs:mix
                color4f outputs:out
                float2 ui:nodegraph:node:pos = (-592.0703, 4.3007812)
                float2 ui:nodegraph:node:size = (109, 145)
                int ui:nodegraph:node:stackingOrder = 10
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
            }

            def Shader "Logo"
            {
                uniform token info:id = "ND_image_color4"
                asset inputs:file = @Frame 3.png@
                string inputs:filtertype
                string inputs:uaddressmode
                string inputs:vaddressmode
                color4f outputs:out
                float2 ui:nodegraph:node:pos = (-811.28516, -87.39844)
                float2 ui:nodegraph:node:size = (148.5, 199)
                int ui:nodegraph:node:stackingOrder = 8
            }

            def Shader "Convert"
            {
                uniform token info:id = "ND_convert_color4_color3"
                prepend color4f inputs:in.connect = </Notebook/Materials/BookCoverTitle/Over.outputs:out>
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-437.89453, 30.433594)
                float2 ui:nodegraph:node:size = (135.5, 40)
                int ui:nodegraph:node:stackingOrder = 13
            }
        }
    }
}

