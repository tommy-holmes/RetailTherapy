#usda 1.0
(
    defaultPrim = "Store"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "Store"
{
    reorder nameChildren = ["Ceiling", "Floor", "Wall_E", "Wall_W", "Wall_N", "Wall_S", "Shelf_1", "Bracket_Right", "Bracket_Left", "Item_1", "Item_2", "Item_3", "Materials"]
    quatf xformOp:orient = (1, 0, 0, 0)
    float3 xformOp:scale = (1, 1, 1)
    float3 xformOp:translate = (0, 9.5160395e-8, 0)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

    def Cube "Ceiling" (
        active = false
        prepend apiSchemas = ["MaterialBindingAPI"]
        customData = {
            float3 rotationEulerHint = (0, 0, 0)
        }
    )
    {
        rel material:binding = </Store/Materials/WoodPlank> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 10
        quatf xformOp:orient = (0.99999994, 0, 0, 0)
        float3 xformOp:scale = (0.9999998, 2.2204459e-16, 0.99999994)
        float3 xformOp:translate = (-1.1244295e-10, 4, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def "MaplePlywood" (
            active = true
            prepend references = @MaplePlywood.usdz@
        )
        {
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)

            over "Basecolor"
            {
                float2 ui:nodegraph:node:size = (148.5, 199)
            }

            over "Roughness"
            {
                float2 ui:nodegraph:node:size = (148.5, 199)
            }

            over "Metallic"
            {
                float2 ui:nodegraph:node:size = (148.5, 199)
            }

            over "MaterialXPreviewSurface"
            {
                float2 ui:nodegraph:node:size = (207.5, 199)
            }

            over "add"
            {
                float2 ui:nodegraph:node:size = (61.5, 36.5)
            }

            over "multiply"
            {
                float2 ui:nodegraph:node:size = (60, 36)
            }

            over "Normal"
            {
                float2 ui:nodegraph:node:size = (148.5, 199)
            }
        }
    }

    def Cube "Floor" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
        customData = {
            float3 rotationEulerHint = (0, 0, 0)
        }
    )
    {
        rel material:binding = </Store/Materials/Floor> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 5
        quatf xformOp:orient = (0.99999994, 0, 0, 0)
        float3 xformOp:scale = (0.9999998, 2.2204459e-16, 0.99999994)
        float3 xformOp:translate = (-1.1244295e-10, 1.1920929e-7, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def Cube "Wall_E" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
        customData = {
            float3 rotationEulerHint = (0, 1.5707963, 0)
        }
    )
    {
        rel material:binding = </Store/Materials/Wallpaper> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 0.2
        quatf xformOp:orient = (0.70710677, 0, 0.7071067, 0)
        float3 xformOp:scale = (25, 20, 2.220446e-16)
        float3 xformOp:translate = (-2.5, 2, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def Cube "Wall_W" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
        customData = {
            float3 rotationEulerHint = (0, 1.5707963, 0)
        }
    )
    {
        rel material:binding = </Store/Materials/Wallpaper> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 0.2
        quatf xformOp:orient = (0.70710677, 0, 0.7071067, 0)
        float3 xformOp:scale = (25, 20, 2.220446e-16)
        float3 xformOp:translate = (2.5, 2, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def Cube "Wall_N" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Store/Materials/Wallpaper> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 0.2
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (25, 20, 2.220446e-16)
        float3 xformOp:translate = (0, 2, 2.5)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def Cube "Wall_S" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        reorder nameChildren = ["Wall_2", "DefaultMaterial"]
        rel material:binding = </Store/Materials/Wallpaper> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 0.2
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (25, 20, 2.220446e-16)
        float3 xformOp:translate = (0, 2, -2.5)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def "Materials" (
        active = true
        references = @Materials.usda@
    )
    {
        reorder nameChildren = ["Floor", "Wallpaper", "VarnishedWood", "WoodPlank", "MaplePlywood", "GlossyBlackWoodPlank"]
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (0, 0, 3)

        over "WoodPlank"
        {
            reorder nameChildren = ["UsdPreviewSurface", "MaterialXPreviewSurface", "Basecolor", "Metallic", "add", "multiply", "Normal", "Roughness"]
            token outputs:mtlx:surface.connect = </Store/Materials/WoodPlank/MaterialXPreviewSurface.outputs:out>
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)

            over "Basecolor"
            {
                float2 ui:nodegraph:node:size = (148.5, 199)
                int ui:nodegraph:node:stackingOrder = 839
            }

            over "Roughness"
            {
                float2 ui:nodegraph:node:size = (148.5, 199)
                int ui:nodegraph:node:stackingOrder = 840
            }

            over "Metallic"
            {
                float2 ui:nodegraph:node:size = (148.5, 199)
            }

            over "MaterialXPreviewSurface"
            {
                color3f inputs:diffuseColor.connect = </Store/Materials/WoodPlank/Basecolor.outputs:out>
                float inputs:metallic.connect = </Store/Materials/WoodPlank/Metallic.outputs:out>
                float3 inputs:normal.connect = </Store/Materials/WoodPlank/add.outputs:out>
                float inputs:roughness.connect = </Store/Materials/WoodPlank/Roughness.outputs:out>
                float2 ui:nodegraph:node:size = (207.5, 199)
                int ui:nodegraph:node:stackingOrder = 838
            }

            over "add"
            {
                float3 inputs:in1.connect = </Store/Materials/WoodPlank/multiply.outputs:out>
                float2 ui:nodegraph:node:size = (61.5, 36.5)
                int ui:nodegraph:node:stackingOrder = 848
            }

            over "multiply"
            {
                float3 inputs:in1.connect = </Store/Materials/WoodPlank/Normal.outputs:out>
                float2 ui:nodegraph:node:size = (60, 36)
                int ui:nodegraph:node:stackingOrder = 847
            }

            over "Normal"
            {
                float2 ui:nodegraph:node:size = (148.5, 199)
                int ui:nodegraph:node:stackingOrder = 850
            }
        }

        def Material "Wallpaper"
        {
            token outputs:mtlx:surface.connect = </Store/Materials/Wallpaper/PreviewSurface.outputs:out>
            token outputs:realitykit:vertex
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (299.25, 99.5)
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)

            def Shader "PreviewSurface"
            {
                uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
                float inputs:clearcoat
                float inputs:clearcoatRoughness
                color3f inputs:diffuseColor.connect = </Store/Materials/Wallpaper/BaseColor.outputs:out>
                color3f inputs:emissiveColor
                float inputs:ior
                float inputs:metallic.connect = None
                float3 inputs:normal.connect = </Store/Materials/Wallpaper/Normal.outputs:out>
                float inputs:opacity.connect = None
                float inputs:roughness.connect = </Store/Materials/Wallpaper/Mask.outputs:out>
                token outputs:out
                float2 ui:nodegraph:node:pos = (74.25, 99.5)
                float2 ui:nodegraph:node:size = (148.5, 199)
                int ui:nodegraph:node:stackingOrder = 19
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = []
            }

            def Shader "BaseColor"
            {
                uniform token info:id = "ND_image_color3"
                color3f inputs:default = (0.055229172, 0.48834085, 0.36402282) (
                    colorSpace = "srgb_texture"
                )
                asset inputs:file
                string inputs:filtertype
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-369.85547, -123.30469)
                float2 ui:nodegraph:node:size = (148.5, 199)
                int ui:nodegraph:node:stackingOrder = 34
            }

            def Shader "Normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @Wallpaper/Retro_Mood_Mocca_Wallpaper_normal.png@
                string inputs:filtertype
                string inputs:vaddressmode
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-373.9375, 378.28125)
                float2 ui:nodegraph:node:size = (148.5, 199)
                int ui:nodegraph:node:stackingOrder = 33
            }

            def Shader "Mask"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @Wallpaper/Retro_Mood_Mocca_Wallpaper_mask.png@
                string inputs:filtertype
                float outputs:out
                float2 ui:nodegraph:node:pos = (-366.66406, 134.8086)
                float2 ui:nodegraph:node:size = (148.5, 199)
                int ui:nodegraph:node:stackingOrder = 33
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:default"]
            }
        }

        over "GlossyBlackWoodPlank"
        {
            token outputs:mtlx:surface.connect = </Store/Materials/GlossyBlackWoodPlank/MaterialXPreviewSurface.outputs:out>
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)

            over "Basecolor"
            {
                asset inputs:file = @Floor/Pale_Oak_Chevron_Flooring_baseColor.png@
                float2 ui:nodegraph:node:size = (148.5, 199)
                int ui:nodegraph:node:stackingOrder = 838
            }

            over "Roughness"
            {
                asset inputs:file = @Floor/Pale_Oak_Chevron_Flooring_mask.png@
                float2 ui:nodegraph:node:size = (148.5, 199)
                int ui:nodegraph:node:stackingOrder = 841
            }

            over "Metallic" (
                active = false
            )
            {
                float2 ui:nodegraph:node:size = (148.5, 199)
                int ui:nodegraph:node:stackingOrder = 841
            }

            over "MaterialXPreviewSurface"
            {
                color3f inputs:diffuseColor.connect = </Store/Materials/GlossyBlackWoodPlank/Basecolor.outputs:out>
                float inputs:metallic.connect = None
                float3 inputs:normal.connect = </Store/Materials/GlossyBlackWoodPlank/add.outputs:out>
                float inputs:roughness.connect = </Store/Materials/GlossyBlackWoodPlank/Roughness.outputs:out>
                float2 ui:nodegraph:node:size = (207.5, 307)
                int ui:nodegraph:node:stackingOrder = 842
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["Advanced"]
            }

            over "add"
            {
                float3 inputs:in1.connect = </Store/Materials/GlossyBlackWoodPlank/multiply.outputs:out>
                float2 ui:nodegraph:node:pos = (85.28893, 587.96356)
                float2 ui:nodegraph:node:size = (61.5, 36.5)
                int ui:nodegraph:node:stackingOrder = 879
            }

            over "multiply"
            {
                float3 inputs:in1.connect = </Store/Materials/GlossyBlackWoodPlank/Normal.outputs:out>
                float2 ui:nodegraph:node:pos = (-2.4831948, 590.0799)
                float2 ui:nodegraph:node:size = (60, 36)
                int ui:nodegraph:node:stackingOrder = 879
            }

            over "Normal"
            {
                asset inputs:file = @Floor/Pale_Oak_Chevron_Flooring_normal.png@
                float2 ui:nodegraph:node:pos = (-197.70018, 563.6854)
                float2 ui:nodegraph:node:size = (148.5, 199)
                int ui:nodegraph:node:stackingOrder = 844
            }
        }

        def Material "Floor"
        {
            token outputs:mtlx:surface.connect = </Store/Materials/Floor/PreviewSurface.outputs:out>
            token outputs:realitykit:vertex
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (385.73343, 99.5)
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 35

            def Shader "Roughness"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @Floor/Pale_Oak_Chevron_Flooring_mask.png@
                string inputs:filtertype
                float outputs:out
                float2 ui:nodegraph:node:pos = (-290.65625, 144.76953)
                float2 ui:nodegraph:node:size = (148.5, 199)
                int ui:nodegraph:node:stackingOrder = 41
            }

            def Shader "BaseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @Floor/Pale_Oak_Chevron_Flooring_baseColor.png@
                string inputs:filtertype
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-233.02734, -92.4375)
                float2 ui:nodegraph:node:size = (148.5, 199)
                int ui:nodegraph:node:stackingOrder = 40
            }

            def Shader "Normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @Floor/Pale_Oak_Chevron_Flooring_normal.png@
                string inputs:filtertype
                string inputs:uaddressmode
                string inputs:vaddressmode
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-217.79192, 370.5631)
                float2 ui:nodegraph:node:size = (148.5, 199)
                int ui:nodegraph:node:stackingOrder = 42
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:texcoord"]
            }

            def Shader "PreviewSurface"
            {
                uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
                float inputs:clearcoat
                float inputs:clearcoatRoughness
                color3f inputs:diffuseColor.connect = </Store/Materials/Floor/BaseColor.outputs:out>
                color3f inputs:emissiveColor
                float inputs:ior
                float inputs:metallic.connect = None
                float3 inputs:normal.connect = </Store/Materials/Floor/Normal.outputs:out>
                float inputs:occlusion
                float inputs:opacity.connect = None
                float inputs:opacityThreshold
                float inputs:roughness.connect = </Store/Materials/Floor/Roughness.outputs:out>
                token outputs:out
                float2 ui:nodegraph:node:pos = (74.25, 99.5)
                float2 ui:nodegraph:node:size = (159.5, 307)
                int ui:nodegraph:node:stackingOrder = 37
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["Advanced"]
            }
        }

        def Material "VarnishedWood"
        {
            token outputs:mtlx:surface.connect = </Store/Materials/VarnishedWood/PreviewSurface.outputs:out>
            token outputs:realitykit:vertex
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (299.25, 99.5)
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)

            def Shader "PreviewSurface"
            {
                uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
                float inputs:clearcoat
                color3f inputs:diffuseColor.connect = </Store/Materials/VarnishedWood/BaseColor.outputs:out>
                float inputs:metallic.connect = </Store/Materials/VarnishedWood/Roughness.outputs:out>
                float3 inputs:normal.connect = None
                float inputs:opacity.connect = None
                float inputs:roughness.connect = None
                token outputs:out
                float2 ui:nodegraph:node:pos = (74.25, 99.5)
                float2 ui:nodegraph:node:size = (159.5, 307)
                int ui:nodegraph:node:stackingOrder = 14
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:diffuseColor", "Advanced"]
            }

            def Shader "BaseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @Table Wood/Ivory_Walnut_Solid_Wood_baseColor.png@
                string inputs:filtertype
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-204.57812, -134.5664)
                float2 ui:nodegraph:node:size = (148.5, 199)
                int ui:nodegraph:node:stackingOrder = 33
            }

            def Shader "Roughness"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @Table Wood/Ivory_Walnut_Solid_Wood_Mask.png@
                string inputs:filtertype
                float outputs:out
                float2 ui:nodegraph:node:pos = (-477.32843, -60.88327)
                float2 ui:nodegraph:node:size = (148.5, 199)
                int ui:nodegraph:node:stackingOrder = 38
            }

            def Shader "Normal"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @Table Wood/Ivory_Walnut_Solid_Wood_Normal.png@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-373.71088, 199.52237)
                float2 ui:nodegraph:node:size = (148.5, 199)
                int ui:nodegraph:node:stackingOrder = 41
            }
        }

        over "MaplePlywood"
        {
            token outputs:mtlx:surface.connect = </Store/Materials/MaplePlywood/MaterialXPreviewSurface.outputs:out>

            over "MaterialXPreviewSurface"
            {
                color3f inputs:diffuseColor.connect = </Store/Materials/MaplePlywood/Basecolor.outputs:out>
                float inputs:metallic.connect = </Store/Materials/MaplePlywood/Metallic.outputs:out>
                float3 inputs:normal.connect = </Store/Materials/MaplePlywood/add.outputs:out>
                float inputs:roughness.connect = </Store/Materials/MaplePlywood/Roughness.outputs:out>
            }

            over "add"
            {
                float3 inputs:in1.connect = </Store/Materials/MaplePlywood/multiply.outputs:out>
            }

            over "multiply"
            {
                float3 inputs:in1.connect = </Store/Materials/MaplePlywood/Normal.outputs:out>
            }
        }
    }

    def Xform "Item_1"
    {
        float3 xformOp:translate = (0, 1.5, -2)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def RealityKitCustomComponent "RealityKitContent_CustomizableItemComponent"
        {
            uniform token info:id = "RealityKitContent.CustomizableItemComponent"
        }
    }

    def Xform "Item_2" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = None (
            bindMaterialAs = "weakerThanDescendants"
        )
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (1, 1.5, -2)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def RealityKitCustomComponent "RealityKitContent_CustomizableItemComponent"
        {
            uniform token info:id = "RealityKitContent.CustomizableItemComponent"
            token itemType = "notebook"
        }
    }

    def Xform "Item_3"
    {
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (-1, 1.5, -2)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def RealityKitCustomComponent "RealityKitContent_CustomizableItemComponent"
        {
            uniform token info:id = "RealityKitContent.CustomizableItemComponent"
            token itemType = "mug"
        }
    }

    def "Shelf_1" (
        active = true
        references = @Shelf.usda@
    )
    {
        reorder nameChildren = ["Shelf", "Bracket_Right", "Bracket_Left"]
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (0, 1.5, -2)

        over "Shelf" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </Store/Materials/VarnishedWood> (
                bindMaterialAs = "weakerThanDescendants"
            )
        }

        over "Bracket_Right" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </Store/Materials/VarnishedWood> (
                bindMaterialAs = "weakerThanDescendants"
            )
        }

        over "Bracket_Left" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </Store/Materials/VarnishedWood> (
                bindMaterialAs = "weakerThanDescendants"
            )
        }
    }
}

